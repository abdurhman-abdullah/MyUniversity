// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using university.Services;

namespace university.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20200526032427_InitialDatabaseCreation")]
    partial class InitialDatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("university.Model.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<int?>("specialtieId");

                    b.HasKey("Id");

                    b.HasIndex("specialtieId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("university.Model.BooksTeachers", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("TeacherId");

                    b.Property<int?>("BooksTeachersBookId");

                    b.Property<int?>("BooksTeachersTeacherId");

                    b.HasKey("BookId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("BooksTeachersBookId", "BooksTeachersTeacherId");

                    b.ToTable("BooksTeachers");
                });

            modelBuilder.Entity("university.Model.DepartmentDirectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("NameFamily")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DepartmentDirectors");
                });

            modelBuilder.Entity("university.Model.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BooksId");

                    b.Property<long>("DivisionNo");

                    b.Property<int?>("SpecialtiesId");

                    b.Property<int?>("TeachersId");

                    b.HasKey("Id");

                    b.HasIndex("BooksId");

                    b.HasIndex("SpecialtiesId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("university.Model.DivisionStudent", b =>
                {
                    b.Property<int>("DivisionId");

                    b.Property<int>("StudentId");

                    b.Property<int?>("DivisionStudentDivisionId");

                    b.Property<int?>("DivisionStudentStudentId");

                    b.HasKey("DivisionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("DivisionStudentDivisionId", "DivisionStudentStudentId");

                    b.ToTable("DivisionStudents");
                });

            modelBuilder.Entity("university.Model.Specialties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TheSectionsId");

                    b.HasKey("Id");

                    b.HasIndex("TheSectionsId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("university.Model.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("NameFamily")
                        .IsRequired();

                    b.Property<int?>("specialtieId");

                    b.Property<int?>("supervisorId");

                    b.HasKey("Id");

                    b.HasIndex("specialtieId");

                    b.HasIndex("supervisorId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("university.Model.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("NameFamily")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("university.Model.Teachers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("NameFamily")
                        .IsRequired();

                    b.Property<int?>("SpecialtiesId");

                    b.Property<int?>("departmentDirectorId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtiesId");

                    b.HasIndex("departmentDirectorId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("university.Model.TheSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePublished");

                    b.Property<int?>("DepartmentDirectorsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentDirectorsId");

                    b.ToTable("TheSections");
                });

            modelBuilder.Entity("university.Model.Books", b =>
                {
                    b.HasOne("university.Model.Specialties", "specialtie")
                        .WithMany("Books")
                        .HasForeignKey("specialtieId");
                });

            modelBuilder.Entity("university.Model.BooksTeachers", b =>
                {
                    b.HasOne("university.Model.Books", "Books")
                        .WithMany("BooksTeachers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("university.Model.Teachers", "Teachers")
                        .WithMany("BooksTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("university.Model.BooksTeachers")
                        .WithMany("BookTeachers")
                        .HasForeignKey("BooksTeachersBookId", "BooksTeachersTeacherId");
                });

            modelBuilder.Entity("university.Model.Division", b =>
                {
                    b.HasOne("university.Model.Books", "Books")
                        .WithMany("Divisions")
                        .HasForeignKey("BooksId");

                    b.HasOne("university.Model.Specialties", "Specialties")
                        .WithMany("Divisions")
                        .HasForeignKey("SpecialtiesId");

                    b.HasOne("university.Model.Teachers", "Teachers")
                        .WithMany("Divisions")
                        .HasForeignKey("TeachersId");
                });

            modelBuilder.Entity("university.Model.DivisionStudent", b =>
                {
                    b.HasOne("university.Model.Division", "Division")
                        .WithMany("DivisionStudents")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("university.Model.Students", "Students")
                        .WithMany("DivisionStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("university.Model.DivisionStudent")
                        .WithMany("DivisionStudents")
                        .HasForeignKey("DivisionStudentDivisionId", "DivisionStudentStudentId");
                });

            modelBuilder.Entity("university.Model.Specialties", b =>
                {
                    b.HasOne("university.Model.TheSections", "TheSections")
                        .WithMany()
                        .HasForeignKey("TheSectionsId");
                });

            modelBuilder.Entity("university.Model.Students", b =>
                {
                    b.HasOne("university.Model.Specialties", "specialtie")
                        .WithMany("Students")
                        .HasForeignKey("specialtieId");

                    b.HasOne("university.Model.Supervisor", "supervisor")
                        .WithMany("Students")
                        .HasForeignKey("supervisorId");
                });

            modelBuilder.Entity("university.Model.Supervisor", b =>
                {
                    b.HasOne("university.Model.DepartmentDirectors", "Department")
                        .WithMany("Supervisor")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("university.Model.Teachers", b =>
                {
                    b.HasOne("university.Model.Specialties", "Specialties")
                        .WithMany("Teachers")
                        .HasForeignKey("SpecialtiesId");

                    b.HasOne("university.Model.DepartmentDirectors", "departmentDirector")
                        .WithMany()
                        .HasForeignKey("departmentDirectorId");
                });

            modelBuilder.Entity("university.Model.TheSections", b =>
                {
                    b.HasOne("university.Model.DepartmentDirectors", "DepartmentDirectors")
                        .WithMany()
                        .HasForeignKey("DepartmentDirectorsId");
                });
#pragma warning restore 612, 618
        }
    }
}
